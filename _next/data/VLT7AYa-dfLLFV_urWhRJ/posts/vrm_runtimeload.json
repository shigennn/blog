{"pageProps":{"post":{"title":"【Unity】 VRMをランタイムでロードする","date":"2023-06-16","slug":"vrm_runtimeload","content":"<h2 id=\"概要\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#概要\"><span class=\"icon icon-link\"></span></a>概要</h2>\n<p>今まで Unity でアバターを扱う際には <a href=\"https://assetstore.unity.com/packages/tools/modeling/trilib-2-model-loading-package-157548?locale=ja-JP\">Trlib</a> を利用して FBX + Texture を動的にロードしていたが、 <code>Trilib</code> はシートライセンスであり、社内メンバーや客先にデモ共有する際にそれぞれ購入してもらう必要があった。<br>\n動的にアバターをロードする要件であれば、 MIT ライセンスである <code>UniVRM</code> を利用して VRM ファイルを扱う方法でも実現できるため、調べて処理を作成した。<br>\n結果として、Humanoid 形式のアバター設定に特に処理が不要な <code>VRM</code> の方が取り扱いやすかった。</p>\n<h2 id=\"コード\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#コード\"><span class=\"icon icon-link\"></span></a>コード</h2>\n<h3 id=\"vrm-をランタイムでロードする\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#vrm-をランタイムでロードする\"><span class=\"icon icon-link\"></span></a>VRM をランタイムでロードする</h3>\n<p>using ディレクティブ</p>\n<pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">VRM</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">UniGLTF</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">VRMShaders</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">Cysharp<span class=\"token punctuation\">.</span>Threading<span class=\"token punctuation\">.</span>Tasks</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>ローカルファイルからロード</p>\n<pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">async</span> <span class=\"token return-type class-name\">UniTask</span> LoadVRMFromFile <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> path<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">RuntimeGltfInstance</span> instance <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> VrmUtility<span class=\"token punctuation\">.</span><span class=\"token function\">LoadAsync</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> vrmBytes<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">RuntimeOnlyAwaitCaller</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    instance<span class=\"token punctuation\">.</span><span class=\"token function\">ShowMeshes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>byte 配列からロード</p>\n<pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">async</span> <span class=\"token return-type class-name\">UniTask</span> LoadVRMFromBytes <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> vrmBytes<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">RuntimeGltfInstance</span> instance <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> VrmUtility<span class=\"token punctuation\">.</span><span class=\"token function\">LoadBytesAsync</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> vrmBytes<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">RuntimeOnlyAwaitCaller</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    instance<span class=\"token punctuation\">.</span><span class=\"token function\">ShowMeshes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3 id=\"runtimegltfinstance-の解放\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#runtimegltfinstance-の解放\"><span class=\"icon icon-link\"></span></a>RuntimeGltfInstance の解放</h3>\n<p><code>RuntimeGltfInstance</code> はネイティブコレクションのため、アバターデータの使用後は <code>instance.Dispose()</code> で解放する必要がある。<br>\nただ、UniVRM 関連の処理をモジュールとして分離し、アバターの設定を扱うクラスから呼び出したかったので、アバター設定クラスが <code>UniGLTF</code> に依存しなくていいように、インスタンス解放用のクラス <code>AvatarInstance</code> を作った。</p>\n<pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AvatarInstance</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">IDisposable</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">GameObject</span> Root <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">private</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Action</span> onDispose<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">AvatarInstance</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">GameObject</span> instanceRoot<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Action</span> disposeAction<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        Root <span class=\"token operator\">=</span> instanceRoot<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onDispose <span class=\"token operator\">=</span> disposeAction<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Dispose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        onDispose<span class=\"token punctuation\">?.</span><span class=\"token function\">Invoke</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        onDispose <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>AvatarInstance を利用して VRMLoad 処理をまとめる</p>\n<pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">VRM</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">UniGLTF</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">VRMShaders</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">Cysharp<span class=\"token punctuation\">.</span>Threading<span class=\"token punctuation\">.</span>Tasks</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">VRMAvatarUtils</span>\n<span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">async</span> <span class=\"token return-type class-name\">UniTask<span class=\"token punctuation\">&#x3C;</span>AvatarInstance<span class=\"token punctuation\">></span></span> LoadVRMFromBytesForURP <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> vrmBytes<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">RuntimeGltfInstance</span> instance <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> VrmUtility<span class=\"token punctuation\">.</span><span class=\"token function\">LoadBytesAsync</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> vrmBytes<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">RuntimeOnlyAwaitCaller</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        instance<span class=\"token punctuation\">.</span><span class=\"token function\">ShowMeshes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">AvatarInstance</span><span class=\"token punctuation\">(</span>instance<span class=\"token punctuation\">.</span>Root<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> instance<span class=\"token punctuation\">.</span><span class=\"token function\">Dispose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">async</span> <span class=\"token return-type class-name\">UniTask<span class=\"token punctuation\">&#x3C;</span>AvatarInstance<span class=\"token punctuation\">></span></span> <span class=\"token function\">LoadVRMFromFileForURP</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> path<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">RuntimeGltfInstance</span> instance <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> VrmUtility<span class=\"token punctuation\">.</span><span class=\"token function\">LoadAsync</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">RuntimeOnlyAwaitCaller</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        instance<span class=\"token punctuation\">.</span><span class=\"token function\">ShowMeshes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">AvatarInstance</span><span class=\"token punctuation\">(</span>instance<span class=\"token punctuation\">.</span>Root<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> instance<span class=\"token punctuation\">.</span><span class=\"token function\">Dispose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>呼び出し元のクラスで、不要になったときに解放する</p>\n<pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">private</span> <span class=\"token class-name\">AvatarInstance</span> avatarInstance<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    avatarInstance <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> VrmUtility<span class=\"token punctuation\">.</span><span class=\"token function\">LoadVRMFromFile</span><span class=\"token punctuation\">(</span><span class=\"token function\">GetVrmPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnDestroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    avatarInstance<span class=\"token punctuation\">.</span><span class=\"token function\">Dispose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3 id=\"urp-で利用する\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#urp-で利用する\"><span class=\"icon icon-link\"></span></a>URP で利用する</h3>\n<p>上記ロードでは、Shader が URP に対応していないものが設定されるため、正常に表示できない。<br>\nURP で表示するために、Material を変更する処理を追加する必要がある。</p>\n<pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">VRM</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">UniGLTF</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">VRMShaders</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">Cysharp<span class=\"token punctuation\">.</span>Threading<span class=\"token punctuation\">.</span>Tasks</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">VRMAvatarUtils</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">async</span> <span class=\"token return-type class-name\">UniTask<span class=\"token punctuation\">&#x3C;</span>AvatarInstance<span class=\"token punctuation\">></span></span> <span class=\"token function\">LoadVRMFromFileForURP</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> path<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">RuntimeGltfInstance</span> instance <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> VrmUtility<span class=\"token punctuation\">.</span><span class=\"token function\">LoadAsync</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">RuntimeOnlyAwaitCaller</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        instance<span class=\"token punctuation\">.</span><span class=\"token function\">ShowMeshes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">ConvertMaterialsToURP</span><span class=\"token punctuation\">(</span>instance<span class=\"token punctuation\">.</span>Root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">AvatarInstance</span><span class=\"token punctuation\">(</span>instance<span class=\"token punctuation\">.</span>Root<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> instance<span class=\"token punctuation\">.</span><span class=\"token function\">Dispose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">ConvertMaterialsToURP</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">GameObject</span> model<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// ここにshader名を入れる</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> urpShaderName <span class=\"token operator\">=</span> <span class=\"token string\">\"UniversalRenderingPipeline/Lit\"</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Renderer<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> renderers <span class=\"token operator\">=</span> model<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">GetComponentsInChildren</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&#x3C;</span>Renderer<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Renderer</span> renderer <span class=\"token keyword\">in</span> renderers<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">Material<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> materials <span class=\"token operator\">=</span> renderer<span class=\"token punctuation\">.</span>sharedMaterials<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&#x3C;</span> materials<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">Material</span> vrmMaterial <span class=\"token operator\">=</span> materials<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\">Material</span> unlitWFMaterial <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Material</span><span class=\"token punctuation\">(</span>Shader<span class=\"token punctuation\">.</span><span class=\"token function\">Find</span><span class=\"token punctuation\">(</span>urpShaderName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                unlitWFMaterial<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> vrmMaterial<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">;</span>\n\n                <span class=\"token comment\">// Copy main texture from the old material to the new one</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>vrmMaterial<span class=\"token punctuation\">.</span><span class=\"token function\">HasProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"_MainTex\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{</span>\n                    <span class=\"token class-name\">Texture</span> mainTexture <span class=\"token operator\">=</span> vrmMaterial<span class=\"token punctuation\">.</span><span class=\"token function\">GetTexture</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"_MainTex\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    unlitWFMaterial<span class=\"token punctuation\">.</span><span class=\"token function\">SetTexture</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"_MainTex\"</span><span class=\"token punctuation\">,</span> mainTexture<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n\n                materials<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> unlitWFMaterial<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            renderer<span class=\"token punctuation\">.</span>sharedMaterials <span class=\"token operator\">=</span> materials<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3 id=\"参考\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#参考\"><span class=\"icon icon-link\"></span></a>参考</h3>\n<ul>\n<li><a href=\"https://vrm-c.github.io/UniVRM/ja/api/0_95_highlevel.html#id1\">UniVRMPrograming ドキュメント - VRMUtility</a></li>\n</ul>","ogImage":{"url":"/assets/blog/dynamic-routing/cover.jpg"},"coverImage":"/assets/blog/dynamic-routing/cover.jpg","excerpt":"VRM0.XをUniVRMを利用してランタイムロードするスクリプト","tags":["Unity","C#"]}},"__N_SSG":true}