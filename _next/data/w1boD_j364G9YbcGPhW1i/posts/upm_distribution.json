{"pageProps":{"post":{"title":"【Unity】 Unity Package Managerから配布できるようにする","date":"2023-06-06","slug":"upm_distribution","content":"<h2 id=\"概要\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#概要\"><span class=\"icon icon-link\"></span></a>概要</h2>\n<p>自社 SDK を<code>Unity Package Manager(UPM)</code> で配布できるように対応した際に調べたこと。<br>\n<code>UPM </code>で配布することのメリットは下記</p>\n<ul>\n<li>SDK 更新時ユーザーは Package Manager から更新をするだけで差分を更新できるため、手動での一部 dll の更新忘れなどがない</li>\n<li>Assets 配下に import されないため、Project が整理される</li>\n<li>デモシーンなど Samples をダウンロードするオプションをつけることも可能</li>\n</ul>\n<p>一方、下記の点は面倒</p>\n<ul>\n<li>Script は<code>Assembly Definition</code> を作成しないとため、<code>Trilib</code> や <code>UniVRM</code> など外部リソースを利用する場合、依存関係の登録が必要となる<br>\nTrilib は AssemblyDefinition をオプションにしていて、自分で展開する必要あったり、UniVRM 関連は複数 asmdef ファイルがあって面倒</li>\n<li>Private Repogitory からの UPM 取得はそのままの git URL からはできない（別途説明予定）</li>\n</ul>\n<h2 id=\"手順\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#手順\"><span class=\"icon icon-link\"></span></a>手順</h2>\n<ol>\n<li>配布元 UnityProject で、下記のようなディレクトリ構造を作る</li>\n</ol>\n<pre><code>&#x3C;Repository>\n├── Assets\n│   └── MyPackage\n│       ├── Runtime\n│       │   ├── MyBehavior1.cs\n│       │   ├── MyBehavior2.cs\n│       │   └── MyPackage.asmdef\n│       ├── Plugins\n│       │   ├── MyPlugin\n│       │   └── 3rdParty\n│       ├── Editor\n│       │   ├── MyMenuItem1.cs\n│       │   └── MyPackage.Editor.asmdef\n│       ├── Samples\n│       │   ├── Sample1\n│       │   └── Sample2\n│       └── package.json\n├── Packages\n├── .gitattributes\n└── .gitignore\n</code></pre>\n<ol start=\"2\">\n<li>\n<p>namespace と AssemblyDefinision\nUPM からダウンロードして Package に格納された C# Script(MonoBehaviour や Editor 拡張)は、Assembly Definision とそれに対応した namaspace を持つ場合のみ、機能する。</p>\n<ul>\n<li>\n<p>asmdef の作成 > Runtime</p>\n<ol>\n<li>Unity Editor で Runtime フォルダに移動。</li>\n<li>右クリックして Create > Assembly Definition を選択。</li>\n<li>新しい Assembly Definition ファイルに[MyPackage]という名前を付け、Enter キーを押して名前を保存。</li>\n<li>asmdef のインスペクターを開き、reference を設定する\n<ol>\n<li>Assembly Definition References の +ボタン を押す</li>\n<li>必要な Assembly を追加する\n例: UniTask, UniTask.Core, Trilib</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>\n<p>asmdef の作成 > Editor</p>\n<ol>\n<li>Unity Editor で Editor フォルダに移動。</li>\n<li>右クリックして Create > Assembly Definition を選択。</li>\n<li>新しい Assembly Definition ファイルに[MyPackage.Editor]という名前を付け、Enter キーを押して名前を保存。</li>\n</ol>\n</li>\n<li>\n<p>Editor の asmdef > Runtime の asmdef に依存するように設定</p>\n<ol>\n<li>[MyPackage.Editor] Assembly Definition ファイルを選択。</li>\n<li>Inspector ウィンドウで Assembly Definition References セクションを展開。</li>\n<li>+ボタンをクリックし、リストから[MyPackage]を選択して依存関係を追加。</li>\n<li>Apply ボタンをクリックして変更を保存。</li>\n</ol>\n</li>\n<li>\n<p>namespace の管理\nasmdef のタイトル名にした名前を namespace にする</p>\n</li>\n<li>\n<p>Trilib は AssemblyDefinitions.zip を展開して、TrilibCore.asmdef を Trilib/TrilibCore/Scripts に格納する</p>\n</li>\n</ul>\n</li>\n<li>\n<p>.gitattributes 作成\n例</p>\n</li>\n</ol>\n<pre class=\"language-txt\"><code class=\"language-txt\">*.unity -text\n*.prefab -text\n*.asset -text\n* text=auto\n\n*.psd filter=lfs diff=lfs merge=lfs -text\n*.png filter=lfs diff=lfs merge=lfs -text\n*.jpg filter=lfs diff=lfs merge=lfs -text\n*.tga filter=lfs diff=lfs merge=lfs -text\n*.tif filter=lfs diff=lfs merge=lfs -text\n*.mp3 filter=lfs diff=lfs merge=lfs -text\n*.wav filter=lfs diff=lfs merge=lfs -text\n*.ogg filter=lfs diff=lfs merge=lfs -text\n*.FBX filter=lfs diff=lfs merge=lfs -text\n*.fbx filter=lfs diff=lfs merge=lfs -text\n*.obj filter=lfs diff=lfs merge=lfs -text\n</code></pre>\n<ol start=\"4\">\n<li>.gitignore 作成\n例</li>\n</ol>\n<pre class=\"language-txt\"><code class=\"language-txt\">/[Ll]ibrary/\n/[Tt]emp/\n/[Oo]bj/\n/[Bb]uild/\n/[Bb]uilds/\n/Assets/AssetStoreTools*\n/Assets/配布禁止の外部アセット*\n\n# Ignore everything in the root folder except specific files\n/*\n\n# Don't ignore\n!/.gitignore\n!/.gitattributes\n!/package.json\n!/Assets/UAPSDK/\n!/Assets/\n\n# Ignore other specific folders and files\n.vscode/\nLogs/\nPackages/\nProjectSettings/\nUserSettings/\n\n# Autogenerated VS/MD/Consulo solution and project files\n*.csproj\n*.unityproj\n*.sln\n*.suo\n*.tmp\n*.user\n*.userprefs\n*.pidb\n*.booproj\n*.svd\n\n# Unity3D generated meta files\n*.pidb.meta\n\n# Unity3D generated file on crash reports\nsysinfo.txt\n\n# Builds\n*.apk\n*.unitypackage\n</code></pre>\n<ol start=\"5\">\n<li>package.json の作成\n下記 template を利用する<br>\npackage.json は配布したいディレクトリのルートディレクトリにする<br>\n例 <code>MyPackage/Plugins</code> のみ配布する場合は、Plugins 直下に保存する</li>\n</ol>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"com.haluika.samplesdk\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"0.0.1\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"displayName\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Sample SDK\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"A sample SDK for ~~~~~~~~.\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"unity\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2021.3\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"dependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">\"ここに記載したpackageがprojectに存在していないと、このpackageはimportできなくなる\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"keywords\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"keyword1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"keyword2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"keyword3\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"author\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"haluika\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"email\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"xxxxxx@xxxx.com\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"url\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://www.unity3d.com\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"samples\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token property\">\"displayName\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"sample1\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"test sample\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"path\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Samples/Sample1\"</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token property\">\"displayName\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"sample2\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"test sample\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"path\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Samples/Sample2\"</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ol start=\"6\">\n<li>\n<p>Samples の作成\npackage.json の\"samples\"で指定することによって、UPM に download ボタンを表示させて Assets 下に download させることができる</p>\n</li>\n<li>\n<p>git hub にリポジトリごと push</p>\n</li>\n<li>\n<p>upm 配布から取得する</p>\n<ul>\n<li>PackageManager の add from git url から取得</li>\n<li>public の場合の URL: https://github.com/<code>username</code>/<code>repositoryname</code>.git?path=<code>path</code></li>\n<li>private の場合の URL: https://<code>token</code>@github.com/<code>username</code>/<code>repositoryname</code>.git?path=<code>path</code></li>\n</ul>\n</li>\n<li>\n<p>token の発行\ngit の右上の account icon > settings > Developer settings > personal access token > Tokens(legacy)</p>\n</li>\n</ol>\n<h2 id=\"reference\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#reference\"><span class=\"icon icon-link\"></span></a>Reference</h2>\n<ul>\n<li>Asset 下に置きたいものは samples として管理すればよい[https://qiita.com/r-ngtm/items/305e4810227e360d4f19]</li>\n<li>[https://qiita.com/sator_imaging/items/469ecc69425b1927b603]</li>\n</ul>","ogImage":{"url":"/assets/blog/dynamic-routing/cover.jpg"},"coverImage":"/assets/blog/dynamic-routing/cover.jpg","excerpt":"検索ページでの説明文","tags":["Unity"]}},"__N_SSG":true}