{"pageProps":{"post":{"title":"てすと用","date":"2023-06-01","slug":"postprocessing","content":"<p>https://stitches.dev/</p>\n<h2 id=\"概要\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#概要\"><span class=\"icon icon-link\"></span></a>概要</h2>\n<p>URP で動的に取り込んだアバターを使ったショート動画生成システムとそのシーンを作っていた時に、メッセージテキストなど特定のオブジェクトにだけ Post Processing をかけないようにしたかったが、そのやり方について詰まったのでまとめてみた。</p>\n<ul>\n<li>UI の TextMeshPro に対して PostProcess をかけない方法</li>\n<li>特定のレイヤーに設定した 3D オブジェクトに PostProcessing をかけない方法</li>\n<li>uGUI 上ではレイヤーだけ設定し、実行時に動的にそのレイヤーから Post Processing を除外する方法</li>\n</ul>\n<h2 id=\"ui-の-textmeshpro-に対して-postprocess-をかけない\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#ui-の-textmeshpro-に対して-postprocess-をかけない\"><span class=\"icon icon-link\"></span></a>UI の TextMeshPro に対して PostProcess をかけない</h2>\n<p>[f:id:haluika:20230618004747p:plain]\n<code>Canvas</code> > <code>Render Mode</code> を <code>Screen Space - Overlay</code> に設定する。以上。<br>\nいつも Canvas が Scene 上で見たときに大きすぎるのが嫌だったので、深く考えず <code>Screen Space - Camera</code> に設定したので少しハマった。</p>\n<h2 id=\"特定のレイヤーに設定した-3d-オブジェクトに-postprocessing-をかけない\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#特定のレイヤーに設定した-3d-オブジェクトに-postprocessing-をかけない\"><span class=\"icon icon-link\"></span></a>特定のレイヤーに設定した 3D オブジェクトに PostProcessing をかけない</h2>\n<p>URP のカメラには <code>Base</code> と <code>Overlay</code> の 2 種類のカメラタイプの設定があり、Camera Stack を設定することで、<code>Overlay</code> を <code>Base</code> に結合して描画されることができる。</p>\n<h3 id=\"手順詳細\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#手順詳細\"><span class=\"icon icon-link\"></span></a>手順詳細</h3>\n<h4 id=\"1-レイヤーの設定\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#1-レイヤーの設定\"><span class=\"icon icon-link\"></span></a>1. レイヤーの設定</h4>\n<p>Post Processing をかけたくないレイヤーを決め、特定のオブジェクトに設定する 。\n（ここでは「Ignore Post Processing」とした）<br>\n[f:id:haluika:20230618005233p:plain]</p>\n<h4 id=\"2-main-camerabaseの設定\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#2-main-camerabaseの設定\"><span class=\"icon icon-link\"></span></a>2. Main Camera(Base)の設定</h4>\n<ul>\n<li><code>Render Type</code> を <code>Base</code> にする</li>\n<li><code>Post Processing</code> を ON にする</li>\n<li><code>Culling Mask</code> から「Ignore Post Processing」レイヤーを除外</li>\n</ul>\n<h4 id=\"3-overlay-camera-の設定\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#3-overlay-camera-の設定\"><span class=\"icon icon-link\"></span></a>3. Overlay Camera の設定</h4>\n<p>新しいカメラを生成して、下記の設定をする</p>\n<ul>\n<li><code>Render Type</code> を <code>Overlay</code> にする</li>\n<li><code>Post Processing</code> を OFF にする</li>\n<li><code>Culling Mask</code> に「Ignore Post Processing」レイヤーのみ設定</li>\n</ul>\n<p>このとき、Transform、FOV などのカメラ設定を Main Camera と同じにして、Main Camera の子に設定しておくと、<a href=\"https://unity.com/ja/unity/features/editor/art-and-design/cinemachine\">CinemaChine</a> などでカメラを動かしたときも常に同じ View になる。</p>\n<p>[f:id:haluika:20230618005842p:plain]</p>\n<h4 id=\"4-main-camera-の-stack-設定\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#4-main-camera-の-stack-設定\"><span class=\"icon icon-link\"></span></a>4. Main Camera の Stack 設定</h4>\n<p>Main Camera の <code>Stack</code> に Overlay Camera を追加する</p>\n<p>こうなる<br>\n[f:id:haluika:20230618010006p:plain:w300]</p>\n<h2 id=\"ugui-上ではレイヤーだけ設定し実行時に動的にそのレイヤーから-post-processing-を除外する\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#ugui-上ではレイヤーだけ設定し実行時に動的にそのレイヤーから-post-processing-を除外する\"><span class=\"icon icon-link\"></span></a>uGUI 上ではレイヤーだけ設定し、実行時に動的にそのレイヤーから Post Processing を除外する</h2>\n<p>作っていたショート動画生成プロジェクトでは、ほぼすべてのシーンでこの設定が必要だったので、実行時に動的に Overlay Camera を生成して、上記設定がされるメソッドを作った。</p>\n<pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine<span class=\"token punctuation\">.</span>Rendering<span class=\"token punctuation\">.</span>Universal</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">IgnorePPlayer</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">MonoBehaviour</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">SerializeField</span></span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">private</span> <span class=\"token class-name\">Camera</span> mainCamera<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">SerializeField</span></span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">private</span> <span class=\"token class-name\">LayerMask</span> ignorePPLayer<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">ConstructIgnorePPLayer</span><span class=\"token punctuation\">(</span>mainCamera<span class=\"token punctuation\">,</span> ignorePPLayer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">ConstructIgnorePPLayer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Camera</span> mainCamera<span class=\"token punctuation\">,</span> <span class=\"token class-name\">LayerMask</span> ignorePPLayer<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mainCamera <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> ignorePPLayer <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">// Main Cameraの子に同位置で同じ設定を持つカメラオブジェクトを生成</span>\n        <span class=\"token class-name\">GameObject</span> overlayCameraObject <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">GameObject</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"OverlayCamera\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        overlayCameraObject<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">.</span>parent <span class=\"token operator\">=</span> mainCamera<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">;</span>\n        overlayCameraObject<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">.</span>localPosition <span class=\"token operator\">=</span> Vector3<span class=\"token punctuation\">.</span>zero<span class=\"token punctuation\">;</span>\n        overlayCameraObject<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">.</span>localRotation <span class=\"token operator\">=</span> Quaternion<span class=\"token punctuation\">.</span>identity<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Camera</span> overlayCamera <span class=\"token operator\">=</span> overlayCameraObject<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddComponent</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&#x3C;</span>Camera<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        overlayCamera<span class=\"token punctuation\">.</span>orthographic <span class=\"token operator\">=</span> mainCamera<span class=\"token punctuation\">.</span>orthographic<span class=\"token punctuation\">;</span>\n        overlayCamera<span class=\"token punctuation\">.</span>fieldOfView <span class=\"token operator\">=</span> mainCamera<span class=\"token punctuation\">.</span>fieldOfView<span class=\"token punctuation\">;</span>\n        overlayCamera<span class=\"token punctuation\">.</span>cullingMask <span class=\"token operator\">=</span> ignorePPLayer<span class=\"token punctuation\">;</span>\n        overlayCamera<span class=\"token punctuation\">.</span>clearFlags <span class=\"token operator\">=</span> CameraClearFlags<span class=\"token punctuation\">.</span>Nothing<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// Overlay Cameraの設定</span>\n        <span class=\"token class-name\">UniversalAdditionalCameraData</span> overlayCameraData <span class=\"token operator\">=</span> overlayCamera<span class=\"token punctuation\">.</span><span class=\"token function\">GetUniversalAdditionalCameraData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        overlayCameraData<span class=\"token punctuation\">.</span>renderType <span class=\"token operator\">=</span> CameraRenderType<span class=\"token punctuation\">.</span>Overlay<span class=\"token punctuation\">;</span>\n        overlayCameraData<span class=\"token punctuation\">.</span>renderPostProcessing <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// Main Camera設定を変更する</span>\n        mainCamera<span class=\"token punctuation\">.</span>cullingMask <span class=\"token operator\">&#x26;=</span> <span class=\"token operator\">~</span>ignorePPLayer<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">UniversalAdditionalCameraData</span> mainCameraData <span class=\"token operator\">=</span> mainCamera<span class=\"token punctuation\">.</span><span class=\"token function\">GetUniversalAdditionalCameraData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        mainCameraData<span class=\"token punctuation\">.</span>cameraStack<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>overlayCamera<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>シーン上のゲームオブジェクトにアタッチすると動く（はず）。<br>\n実際のプロジェクトでは、これとほぼ同じメソッドを static class を作ってモジュールとして外部のクラスから利用している。</p>\n<h2 id=\"参考\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#参考\"><span class=\"icon icon-link\"></span></a>参考</h2>\n<p>https://forum.unity.com/threads/post-processing-textmeshpro-unity-bug.680512/</p>\n<p>https://note.com/npaka/n/n856472efa5bc</p>","ogImage":{"url":"/assets/blog/dynamic-routing/cover.jpg"},"coverImage":"/assets/blog/dynamic-routing/cover.jpg","excerpt":"てすとです","tags":["Unity"]}},"__N_SSG":true}